buildscript {
    ext.loadFile = { fileName ->
        File result = file("$rootDir.path/$fileName")
        if (!result.exists()) {
            result = file("$rootDir.path/deploy/$fileName")
        }
        return result
    }

    ext.loadProperties = { fileName, defaultPros = { null } ->
        Properties props = new Properties(defaultPros.call())
        File file = loadFile(fileName)
        if (file.exists()) {
            props.load(new FileInputStream(file))
        }
        return props
    }
    repositories {
        jcenter()
        maven { url 'http://repo.jfrog.org/artifactory/gradle-plugins' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        Properties props = loadProperties("gradle.properties")
        if (props.getProperty("artifactory_contextUrl") != null) {
            maven {
                url "${props.getProperty("artifactory_contextUrl")}/${props.getProperty("artifactory_snapshot_repoKey")}"
            }
            maven {
                url "${props.getProperty("artifactory_contextUrl")}/${props.getProperty("artifactory_release_repoKey")}"
            }
        }


    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.5"
    }

}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }


}

def getAarFilePath(dir, projectName) {
    return "${dir}/outputs/aar/" + projectName + "-release.aar"
}

def SNAPSHOT_MAVEN_TYPE = 'snapshot'
//configure(allprojects.findAll { it.name.startsWith('lib_') || it.name.equals('pullToRefresh_Lib') }) {//所有名称以lib_开头的module
subprojects {
    File deployFile = new File(project.projectDir, "deploy.py")
    if (deployFile.exists()) {
        return
    }

    //artifactory相关
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    //读取module的version
    Properties props = loadProperties("artifactory_version.properties")
    Properties gradlePros = loadProperties("gradle.properties") {
        Properties defaultPros = new Properties()
        defaultPros.setProperty("maven_groupId", "your.group.id")
        defaultPros.setProperty("artifactory_contextUrl", "http://localhost:8081/artifactory")
        defaultPros.setProperty("artifactory_snapshot_repoKey", "libs-snapshot-local")
        defaultPros.setProperty("artifactory_release_repoKey", "libs-release-local")
        defaultPros.setProperty("artifactory_user", "admin")
        defaultPros.setProperty("artifactory_password", "password")
        defaultPros
    }

    def maven_type = props.getProperty(project.name + 'MavenType', props.getProperty("maven_type"))
    def versionType = maven_type == SNAPSHOT_MAVEN_TYPE ? '-SNAPSHOT' : ''
    def artifactName = props.getProperty(project.name + 'ArtifactId', project.name)
    def artifactGroupId = props.getProperty(project.name + 'GroupId', gradlePros.getProperty("maven_groupId"))

    Properties pomProps = loadProperties("pom.properties")
    publishing {
        publications {
            aar(MavenPublication) {


                groupId artifactGroupId
                artifactId artifactName

                def libVersion = props.getProperty(project.name)
                if (libVersion == null)
                    return
                libVersion += versionType

                version = libVersion

                println "----------------------------------------"
                println "|        " + libVersion + "        |"
                println "----------------------------------------"

                // Tell maven to prepare the generated "*.aar" file for publishing
                File file = new File(getAarFilePath(buildDir, project.getName()))
                if (file.exists()) {
                    artifact(file.getPath())
                } else {
                    artifact(getAarFilePath(buildDir, artifactName))
                }

                //The publication doesn't know about our dependencies, so we have to manually add them to the pom
                pom.withXml {
                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    project.configurations.each { configuration ->

                        if (!pomProps.containsKey(configuration.name) || configuration.dependencies.isEmpty()) {
//                            println "----> skip configuration: $configuration.name"
                            return
                        }
                        configuration.dependencies.each {
                            if (it.group == null || it.name == null ||
                                    it.group == project.parent.name) {
                                return
                            }

                            println "========================================"
                            println "append dependency to pom"
                            println "<dependency>"
                            println "  <groupId>" + it.group + "</groupId>"
                            println "  <artifactId>" + it.name + "</artifactId>"
                            println "  <version>" + it.version + "</version>"
                            println "  <scope>" + configuration.name + "</scope>"
                            println "</dependency>"

                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', configuration.name)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    artifactory {//artifactory配置
        contextUrl = gradlePros.getProperty("artifactory_contextUrl")
        //The base Artifactory URL if not overridden by the publisher/resolver
        publish {
            repository {
                repoKey = maven_type == SNAPSHOT_MAVEN_TYPE ? gradlePros.getProperty("artifactory_snapshot_repoKey") : gradlePros.getProperty("artifactory_release_repoKey")
                username = gradlePros.getProperty("artifactory_user")
                password = gradlePros.getProperty("artifactory_password")
                maven = true
            }
            defaults {
                // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
                publications('aar')
                publishArtifacts = true

                // Properties to be attached to the published artifacts.
                properties = ['qa.level': 'basic', 'dev.team': 'core']
                // Publish generated POM files to Artifactory (true by default)
                publishPom = true //Publish generated POM files to Artifactory (true by default)
                publishIvy = false
                //Publish generated Ivy descriptor files to Artifactory (true by default)
            }

        }
    }

}
